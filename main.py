import os
import httpx
import sqlite3
import json
import pytz
import types
from datetime import datetime, time as dt_time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    PicklePersistence,
)
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(SCRIPT_DIR, 'weather_bot.db')
PERSISTENCE_PATH = os.path.join(SCRIPT_DIR, 'bot_persistence.pickle')
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
(
    SELECTING_ACTION, 
    AWAITING_CITY, 
    AWAITING_TIME, 
    SELECTING_DAYS,
    AWAITING_FEEDBACK,
) = range(5)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_preferences (
        user_id INTEGER PRIMARY KEY, default_city TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS favorite_cities (
        id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, city_name TEXT, UNIQUE(user_id, city_name)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscriptions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        city TEXT NOT NULL,
        time TEXT, -- –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Ç–∏–ø–∞ 'alert_rain'
        days TEXT, -- JSON list of ints 0-6. –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL –¥–ª—è 'alert_rain'
        forecast_type TEXT NOT NULL, -- 'daily' –∏–ª–∏ 'alert_rain'
        is_active BOOLEAN DEFAULT 1
    )
    ''')
    conn.commit()
    conn.close()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ) ---
def set_user_default_city(user_id: int, city: str):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO user_preferences (user_id, default_city) VALUES (?, ?)', (user_id, city))
        conn.commit()

def get_user_default_city(user_id: int) -> str | None:
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT default_city FROM user_preferences WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None

def add_favorite_city(user_id: int, city: str):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        try:
            cursor.execute('INSERT INTO favorite_cities (user_id, city_name) VALUES (?, ?)', (user_id, city))
            conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

def get_favorite_cities(user_id: int) -> list[str]:
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT city_name FROM favorite_cities WHERE user_id = ? ORDER BY city_name', (user_id,))
        return [row[0] for row in cursor.fetchall()]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–ü–æ–¥–ø–∏—Å–∫–∏) ---
def add_subscription(user_id: int, sub_data: dict) -> int:
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO subscriptions (user_id, city, time, days, forecast_type) VALUES (?, ?, ?, ?, ?)',
            (user_id, sub_data['city'], sub_data.get('time'), sub_data.get('days'), sub_data['forecast_type'])
        )
        conn.commit()
        return cursor.lastrowid

def get_user_subscriptions(user_id: int) -> list[dict]:
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM subscriptions WHERE user_id = ? AND is_active = 1', (user_id,))
        return [dict(row) for row in cursor.fetchall()]

def delete_subscription(sub_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE subscriptions SET is_active = 0 WHERE id = ?', (sub_id,))
        conn.commit()

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã ---
async def get_weather(city: str, api_key: str) -> str:
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru'
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            geodata = response.json()
        
        if geodata.get('cod') != 200:
            return f"–û—à–∏–±–∫–∞: {geodata.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."

        lat, lon = geodata['coord']['lat'], geodata['coord']['lon']
        return await get_weather_by_coords(lat, lon, api_key, geodata['name'])

    except httpx.HTTPStatusError as e:
        if e.response.status_code == 404:
            return f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        return f'–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}'
    except Exception as e:
        return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}'

async def get_forecast(city: str, api_key: str) -> str:
    url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru'
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            data = response.json()

        if data.get('cod') != '200':
            return f"–û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

        forecast_by_day = {}
        for item in data['list']:
            date = datetime.fromtimestamp(item['dt']).strftime('%Y-%m-%d')
            if date not in forecast_by_day:
                forecast_by_day[date] = []
            forecast_by_day[date].append(item)
        
        message = [f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è {data['city']['name']}:\n"]
        for i, (date, forecasts) in enumerate(forecast_by_day.items()):
            if i >= 5: break
            day_name = datetime.strptime(date, '%Y-%m-%d').strftime('%A').capitalize()
            day_temps = [f['main']['temp'] for f in forecasts]
            desc = max(set(f['weather'][0]['description'] for f in forecasts), key=[f['weather'][0]['description'] for f in forecasts].count)
            message.append(f"{day_name} ({date}): {min(day_temps):.0f}¬∞C...{max(day_temps):.0f}¬∞C, {desc.capitalize()}")
        
        return '\n'.join(message)
    except Exception as e:
        return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'

def get_uv_index_description(uv_index: float) -> str:
    if uv_index < 3: return f"{uv_index} (–ù–∏–∑–∫–∏–π)"
    if uv_index < 6: return f"{uv_index} (–°—Ä–µ–¥–Ω–∏–π)"
    if uv_index < 8: return f"{uv_index} (–í—ã—Å–æ–∫–∏–π)"
    if uv_index < 11: return f"{uv_index} (–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π)"
    return f"{uv_index} (–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π)"

async def get_one_call_data(lat: float, lon: float, api_key: str) -> dict:
    url = f'https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude=minutely,alerts&appid={api_key}&units=metric&lang=ru'
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
        response.raise_for_status()
        return response.json()

async def get_weather_by_coords(latitude: float, longitude: float, api_key: str, city_name: str = None) -> str:
    try:
        url = f'https://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={api_key}&units=metric&lang=ru'
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            data = response.json()
            
        if not city_name:
            city_name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ')
            
        main_data = data['main']
        weather_data = data['weather'][0]
        wind_speed = data['wind']['speed']
        sunrise = datetime.fromtimestamp(data['sys']['sunrise']).strftime('%H:%M')
        sunset = datetime.fromtimestamp(data['sys']['sunset']).strftime('%H:%M')
        
        return (
            f'–ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n'
            f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {main_data["temp"]:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {main_data["feels_like"]:.1f}¬∞C)\n'
            f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {weather_data["description"].capitalize()}\n'
            f'üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {main_data["humidity"]}%\n'
            f'üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n'
            f'üåÖ –í–æ—Å—Ö–æ–¥: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}'
        )
    except Exception as e:
        return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'

async def get_hourly_forecast(city: str, api_key: str) -> str:
    url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru'
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            data = response.json()

        if data.get('cod') != '200':
            return f"–û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

        city_name = data['city']['name']
        message = [f'–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ {city_name} –Ω–∞ 24 —á–∞—Å–∞:\n']

        for item in data['list'][:8]: 
            time_str = datetime.fromtimestamp(item['dt']).strftime('%H:%M')
            temp = item['main']['temp']
            description = item['weather'][0]['description']
            message.append(f"{time_str}: {temp:.1f}¬∞C, {description.capitalize()}")
        
        return '\n'.join(message)
    except Exception as e:
        return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", callback_data='ask_city_weather')],
        [InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data='ask_city_forecast')],
        [InlineKeyboardButton("–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data='ask_city_hourly')],
        [InlineKeyboardButton("üìç –ü–æ–≥–æ–¥–∞ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é", callback_data='get_weather_by_location')],
        [InlineKeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", callback_data='show_favorite_cities')],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data='manage_subscriptions')],
        [InlineKeyboardButton("‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='feedback_start')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    user = update.effective_user
    text = f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø MeteoBot. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:'
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text('–ü—Ä–∏–º–µ—Ä: /setcity –ú–æ—Å–∫–≤–∞')
        return
    city = ' '.join(context.args)
    set_user_default_city(update.effective_user.id, city)
    await update.message.reply_text(f'–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}.')

async def add_fav(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text('–ü—Ä–∏–º–µ—Ä: /addfav –ü–∞—Ä–∏–∂')
        return
    city = ' '.join(context.args).strip()
    if add_favorite_city(update.effective_user.id, city):
        await update.message.reply_text(f'–ì–æ—Ä–æ–¥ "{city}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.')
    else:
        await update.message.reply_text(f'–ì–æ—Ä–æ–¥ "{city}" —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.')

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    action = context.user_data.get('next_action')
    if not action:
        await update.message.reply_text('–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.')
        return

    city = update.message.text
    if action == 'get_weather':
        weather_info = await get_weather(city, OPENWEATHER_API_KEY)
        await update.message.reply_text(weather_info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]))
    elif action == 'get_forecast':
        forecast_info = await get_forecast(city, OPENWEATHER_API_KEY)
        await update.message.reply_text(forecast_info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]))
    elif action == 'get_hourly':
        hourly_info = await get_hourly_forecast(city, OPENWEATHER_API_KEY)
        await update.message.reply_text(hourly_info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]))
    
    context.user_data.pop('next_action', None)

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'ask_city_weather':
        context.user_data['next_action'] = 'get_weather'
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:')
    elif data == 'ask_city_forecast':
        context.user_data['next_action'] = 'get_forecast'
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:')
    elif data == 'ask_city_hourly':
        context.user_data['next_action'] = 'get_hourly'
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:')
    elif data == 'get_weather_by_location':
        await query.edit_message_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.')
    elif data == 'show_favorite_cities':
        await show_favorite_cities_menu(update, context)
    elif data.startswith('weather_fav_'):
        city = data.replace('weather_fav_', '')
        weather_info = await get_weather(city, OPENWEATHER_API_KEY)
        await query.edit_message_text(weather_info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]))
    elif data == 'back_to_main':
        await start(update, context)

async def show_favorite_cities_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    fav_cities = get_favorite_cities(query.from_user.id)
    if not fav_cities:
        await query.edit_message_text('–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]))
        return
    
    keyboard = [[InlineKeyboardButton(city, callback_data=f'weather_fav_{city}')] for city in fav_cities]
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    await query.edit_message_text('–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:', reply_markup=InlineKeyboardMarkup(keyboard))

# --- –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (ConversationHandler) ---

# 1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
async def manage_subscriptions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, is_new_message: bool = True) -> int:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
    query = update.callback_query
    if query:
        await query.answer()

    user_id = update.effective_user.id
    subs = get_user_subscriptions(user_id)

    text = "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data='sub_add_daily')],
        [InlineKeyboardButton("üö® –î–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ", callback_data='sub_add_rain_alert')],
    ]

    if subs:
        text += "\n\n–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:"
        for sub in subs:
            sub_type_rus = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑" if sub['forecast_type'] == 'daily' else "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ"
            button_text = f"{sub['city']} ({sub_type_rus})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"sub_view_{sub['id']}")])
    else:
        text += "\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.text != text:
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await query.answer()

    return SELECTING_ACTION

async def sub_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = query.from_user.id
    subscriptions = get_user_subscriptions(user_id)
    
    text = "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
    keyboard = []
    if subscriptions:
        text += "\n\n–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:"
        for sub in subscriptions:
            sub_type_rus = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑" if sub['forecast_type'] == 'daily' else "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ"
            button_text = f"{sub['city']} ({sub_type_rus})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"sub_view_{sub['id']}")])
    else:
        text += "\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
    
    keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data='sub_new')])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.text != text:
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await query.answer()

    return SELECTING_ACTION

async def sub_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['new_sub'] = {}
    keyboard = [
        [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã", callback_data='sub_type_daily')],
        [InlineKeyboardButton("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ/—Å–Ω–µ–≥–µ", callback_data='sub_type_alert_rain')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='sub_cancel')]
    ]
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_ACTION

async def sub_receive_forecast_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    forecast_type = query.data.split('_')[-1]
    context.user_data['new_sub']['forecast_type'] = forecast_type
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:")
    return AWAITING_CITY

async def sub_receive_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = update.message.text
    context.user_data['new_sub']['city'] = city
    
    forecast_type = context.user_data['new_sub']['forecast_type']
    if forecast_type == 'daily':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00).")
        return AWAITING_TIME
    elif forecast_type == 'alert_rain':
        user_id = update.effective_user.id
        sub_data = context.user_data['new_sub']
        sub_data['time'] = None
        sub_data['days'] = None
        sub_id = add_subscription(user_id, sub_data)
        await schedule_subscription_jobs(context.application, sub_id, user_id, sub_data)
        await update.message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        await sub_menu_command(update, context)
        return ConversationHandler.END

async def sub_receive_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        time_str = update.message.text
        user_time = dt_time.fromisoformat(time_str)
        context.user_data['new_sub']['time'] = user_time.strftime('%H:%M')
        context.user_data['selected_days'] = []
        
        keyboard = get_days_keyboard([])
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECTING_DAYS
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00).")
        return AWAITING_TIME

async def sub_receive_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    day = query.data.split('_')[-1]
    await query.answer()

    selected_days = context.user_data.get('selected_days', [])

    if day == 'done':
        if not selected_days:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å.", show_alert=True)
            return SELECTING_DAYS
        
        user_id = query.from_user.id
        sub_data = context.user_data['new_sub']
        sub_data['days'] = json.dumps(sorted(selected_days))
        sub_id = add_subscription(user_id, sub_data)
        await schedule_subscription_jobs(context.application, sub_id, user_id, sub_data)
        
        await query.edit_message_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{sub_data['city']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        await sub_menu_command(update, context)
        return ConversationHandler.END

    day_int = int(day)
    if day_int in selected_days:
        selected_days.remove(day_int)
    else:
        selected_days.append(day_int)
    
    context.user_data['selected_days'] = selected_days
    keyboard = get_days_keyboard(selected_days)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_DAYS

async def sub_view(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    sub_id = int(query.data.split('_')[-1])
    
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM subscriptions WHERE id = ?', (sub_id,))
        sub = dict(cursor.fetchone())

    if not sub:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=await get_sub_menu_keyboard(query.from_user.id))
        return SELECTING_ACTION

    sub_type_rus = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑" if sub['forecast_type'] == 'daily' else "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ"
    text = f"<b>–î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    text += f"<b>–ì–æ—Ä–æ–¥:</b> {sub['city']}\n"
    text += f"<b>–¢–∏–ø:</b> {sub_type_rus}\n"

    if sub['forecast_type'] == 'daily':
        days_map = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        days_list = json.loads(sub['days'])
        days_str = ', '.join([days_map[d] for d in days_list])
        text += f"<b>–í—Ä–µ–º—è:</b> {sub['time']}\n"
        text += f"<b>–î–Ω–∏:</b> {days_str}\n"

    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"sub_delete_{sub_id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='manage_subscriptions')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SELECTING_ACTION

async def sub_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    sub_id = int(query.data.split('_')[-1])
    
    job_name = f"sub_{sub_id}"
    jobs = context.application.job_queue.get_jobs_by_name(job_name)
    for job in jobs:
        job.remove()

    delete_subscription(sub_id)
    await query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await sub_menu(update, context)
    return SELECTING_ACTION

async def sub_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await sub_menu(update, context)
    return ConversationHandler.END

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await start(update, context)
    return ConversationHandler.END

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def get_days_keyboard(selected_days: list) -> list:
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard = []
    row = []
    for i, day_name in enumerate(days):
        text = f"‚úÖ {day_name}" if i in selected_days else day_name
        row.append(InlineKeyboardButton(text, callback_data=f"day_{i}"))
        if len(row) == 4:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="day_done")])
    return keyboard

async def get_sub_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    subscriptions = get_user_subscriptions(user_id)
    keyboard = []
    if subscriptions:
        for sub in subscriptions:
            sub_type_rus = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑" if sub['forecast_type'] == 'daily' else "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ"
            button_text = f"{sub['city']} ({sub_type_rus})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"sub_view_{sub['id']}")])
    keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data='sub_new')])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')])
    return InlineKeyboardMarkup(keyboard)

async def sub_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
    reply_markup = await get_sub_menu_keyboard(user_id)
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

# --- –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return AWAITING_FEEDBACK

async def feedback_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    feedback_text = update.message.text

    if ADMIN_CHAT_ID:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}):\n\n{feedback_text}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'admin_reply_{user_id}')]])
            )
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
    
    await start(update, context)
    return ConversationHandler.END

async def feedback_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await start(update, context)
    return ConversationHandler.END

async def admin_reply_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id_to_reply = int(query.data.split('_')[-1])
    context.user_data['user_id_to_reply'] = user_id_to_reply
    await query.answer()
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_reply}:")
    return AWAITING_ADMIN_REPLY

async def admin_reply_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞, –µ—ë –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    pass

# --- –õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
async def send_daily_forecast(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id, city = job.data['user_id'], job.data['city']
    weather_info = await get_weather(city, OPENWEATHER_API_KEY)
    await context.bot.send_message(chat_id=user_id, text=weather_info)

async def check_rain_alerts(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id, city = job.data['user_id'], job.data['city']
    sub_id = job.data['sub_id']
    
    lock_job_name = f"rain_lock_{sub_id}"
    if context.application.job_queue.get_jobs_by_name(lock_job_name):
        return

    try:
        data = await get_one_call_data_by_city(city, OPENWEATHER_API_KEY)
        hourly_forecast = data.get('hourly', [])
        
        for hour in hourly_forecast[:4]:
            if 'rain' in hour.get('weather', [{}])[0].get('main', '').lower():
                await context.bot.send_message(
                    chat_id=user_id, 
                    text=f"‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í –≥–æ—Ä–æ–¥–µ {city} –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å!"
                )
                context.application.job_queue.run_once(lambda: None, 3600, name=lock_job_name)
                break
    except Exception:
        pass

async def get_one_call_data_by_city(city: str, api_key: str) -> dict:
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}'
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
        response.raise_for_status()
        geodata = response.json()
    lat, lon = geodata['coord']['lat'], geodata['coord']['lon']
    return await get_one_call_data(lat, lon, api_key)

async def schedule_subscription_jobs(application: Application, sub_id: int, user_id: int, sub_data: dict):
    scheduler = application.job_queue
    job_name = f"sub_{sub_id}"

    if sub_data['forecast_type'] == 'daily':
        moscow_tz = pytz.timezone('Europe/Moscow')
        user_time = dt_time.fromisoformat(sub_data['time'])
        days = tuple(json.loads(sub_data['days']))
        scheduler.run_daily(
            send_daily_forecast,
            time=user_time,
            days=days,
            chat_id=user_id,
            user_id=user_id,
            name=job_name,
            data={'user_id': user_id, 'city': sub_data['city']},
            tzinfo=moscow_tz
        )
    elif sub_data['forecast_type'] == 'alert_rain':
        scheduler.run_repeating(
            check_rain_alerts,
            interval=900, 
            first=10,
            name=job_name,
            data={'user_id': user_id, 'city': sub_data['city'], 'sub_id': sub_id}
        )

async def reschedule_all_jobs(application: Application):
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM subscriptions WHERE is_active = 1')
        all_subs = [dict(row) for row in cursor.fetchall()]

    for sub in all_subs:
        await schedule_subscription_jobs(application, sub['id'], sub['user_id'], sub)
    print(f"Rescheduled {len(all_subs)} jobs.")

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    latitude = update.message.location.latitude
    longitude = update.message.location.longitude
    weather_info = await get_weather_by_coords(latitude, longitude, OPENWEATHER_API_KEY)
    await update.message.reply_text(weather_info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]))

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è --- 
def main() -> None:
    init_db()

    persistence = PicklePersistence(filepath=PERSISTENCE_PATH)
    
    application = Application.builder().token(TOKEN).persistence(persistence).post_init(reschedule_all_jobs).build()

    # --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ ---
    sub_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(sub_menu, pattern='^manage_subscriptions$')],
        states={
            SELECTING_ACTION: [
                CallbackQueryHandler(sub_new, pattern='^sub_new$'),
                CallbackQueryHandler(sub_receive_forecast_type, pattern='^sub_type_'),
                CallbackQueryHandler(sub_view, pattern='^sub_view_'),
                CallbackQueryHandler(sub_delete, pattern='^sub_delete_'),
                CallbackQueryHandler(back_to_main_menu, pattern='^back_to_main_menu$'),
                CallbackQueryHandler(sub_menu, pattern='^manage_subscriptions$'),
            ],
            AWAITING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, sub_receive_city)],
            AWAITING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, sub_receive_time)],
            SELECTING_DAYS: [CallbackQueryHandler(sub_receive_days, pattern='^day_')],
        },
        fallbacks=[
            CallbackQueryHandler(sub_cancel, pattern='^sub_cancel$'),
            CommandHandler('start', start)
        ],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END
        },
        persistent=True, name="sub_conversation"
    )

    # --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---
    feedback_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(feedback_start, pattern='^feedback_start$')],
        states={
            AWAITING_FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_receive)]
        },
        fallbacks=[CommandHandler('cancel', feedback_cancel)],
        persistent=True, name="feedback_conversation"
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setcity", set_city))
    application.add_handler(CommandHandler("addfav", add_fav))
    
    application.add_handler(sub_handler)
    application.add_handler(feedback_handler)

    application.add_handler(CallbackQueryHandler(button_callback_handler))
    application.add_handler(MessageHandler(filters.LOCATION, location_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    application.run_polling()

if __name__ == '__main__':
    main()