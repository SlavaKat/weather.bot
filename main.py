import os
import httpx
import sqlite3
import json
import pytz
from datetime import datetime, time as dt_time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(SCRIPT_DIR, 'weather_bot.db')
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
(
    SELECTING_ACTION,
    AWAITING_CITY,
    AWAITING_TIME,
    SELECTING_DAYS,
    SELECTING_FORECAST_TYPE,
    CONFIRM_SUBSCRIPTION,
    AWAITING_FEEDBACK,
    AWAITING_ADMIN_REPLY,
) = range(8)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_preferences (
        user_id INTEGER PRIMARY KEY,
        default_city TEXT
    )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS favorite_cities (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        city_name TEXT,
        UNIQUE(user_id, city_name)
    )
    ''')
    # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscriptions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        city TEXT NOT NULL,
        time TEXT, -- –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        days TEXT, -- –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        forecast_type TEXT NOT NULL, -- 'current', 'forecast', 'hourly', 'alert_rain'
        is_active BOOLEAN DEFAULT 1
    )
    ''')
    conn.commit()
    conn.close()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ) ---
def set_user_default_city(user_id: int, city: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO user_preferences (user_id, default_city) VALUES (?, ?)', (user_id, city))
    conn.commit()
    conn.close()

def get_user_default_city(user_id: int) -> str | None:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT default_city FROM user_preferences WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def add_favorite_city(user_id: int, city: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO favorite_cities (user_id, city_name) VALUES (?, ?)', (user_id, city))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False 
    finally:
        conn.close()

def get_favorite_cities(user_id: int) -> list[str]:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT city_name FROM favorite_cities WHERE user_id = ? ORDER BY city_name', (user_id,))
    cities = [row[0] for row in cursor.fetchall()]
    conn.close()
    return cities

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–ü–æ–¥–ø–∏—Å–∫–∏) ---
def add_subscription(user_id: int, sub_data: dict) -> int:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO subscriptions (user_id, city, time, days, forecast_type) VALUES (?, ?, ?, ?, ?)',
        (user_id, sub_data['city'], sub_data['time'], json.dumps(sub_data['days']), sub_data['forecast_type'])
    )
    sub_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return sub_id

def get_user_subscriptions(user_id: int) -> list[dict]:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM subscriptions WHERE user_id = ? AND is_active = 1', (user_id,))
    subs = [dict(row) for row in cursor.fetchall()]
    conn.close()
    return subs

def delete_subscription(sub_id: int):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('UPDATE subscriptions SET is_active = 0 WHERE id = ?', (sub_id,))
    conn.commit()
    conn.close()

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã ---
async def get_weather(city: str, api_key: str) -> str:
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru'
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            geodata = response.json()
        
        if geodata.get('cod') != 200:
            return f"–û—à–∏–±–∫–∞: {geodata.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."

        lat, lon = geodata['coord']['lat'], geodata['coord']['lon']
        city_name, country = geodata['name'], geodata['sys']['country']

        data = await get_one_call_data(lat, lon, api_key)
        current = data['current']
        
        temp = current['temp']
        feels_like = current['feels_like']
        description = current['weather'][0]['description']
        humidity = current['humidity']
        wind_speed = current['wind_speed']
        uv_index = get_uv_index_description(current.get('uvi', 0))
        sunrise = datetime.fromtimestamp(current['sunrise']).strftime('%H:%M')
        sunset = datetime.fromtimestamp(current['sunset']).strftime('%H:%M')

        return (
            f"–ü–æ–≥–æ–¥–∞ –≤ {city_name}, {country}:\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C)\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
            f"‚òÄÔ∏è –£–§-–∏–Ω–¥–µ–∫—Å: {uv_index}\n"
            f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}"
        )
    except Exception as e:
        return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'

async def get_forecast(city: str, api_key: str) -> str:
    url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru'
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            data = response.json()

        if data.get('cod') != '200':
            return f"–û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

        forecast_by_day = {}
        for item in data['list']:
            date = datetime.fromtimestamp(item['dt']).strftime('%Y-%m-%d')
            if date not in forecast_by_day:
                forecast_by_day[date] = []
            forecast_by_day[date].append(item)
        
        message = [f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è {data['city']['name']}:\n"]
        for i, (date, forecasts) in enumerate(forecast_by_day.items()):
            if i >= 5: break
            day_name = datetime.strptime(date, '%Y-%m-%d').strftime('%A').capitalize()
            day_temps = [f['main']['temp'] for f in forecasts]
            desc = max(set(f['weather'][0]['description'] for f in forecasts), key=[f['weather'][0]['description'] for f in forecasts].count)
            message.append(f"{day_name} ({date}): {min(day_temps):.0f}¬∞C...{max(day_temps):.0f}¬∞C, {desc.capitalize()}")
        
        return '\n'.join(message)
    except Exception as e:
        return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'

def get_uv_index_description(uv_index: float) -> str:
    if uv_index < 3:
        return f"{uv_index} (–ù–∏–∑–∫–∏–π)"
    elif uv_index < 6:
        return f"{uv_index} (–°—Ä–µ–¥–Ω–∏–π)"
    elif uv_index < 8:
        return f"{uv_index} (–í—ã—Å–æ–∫–∏–π)"
    elif uv_index < 11:
        return f"{uv_index} (–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π)"
    else:
        return f"{uv_index} (–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π)"

async def get_one_call_data(lat: float, lon: float, api_key: str) -> dict:
    url = f'https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude=minutely,alerts&appid={api_key}&units=metric&lang=ru'
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
        response.raise_for_status()
        return response.json()

async def get_weather_by_coords(latitude: float, longitude: float, api_key: str) -> str:
    try:
        geo_url = f'https://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={api_key}&units=metric&lang=ru'
        async with httpx.AsyncClient() as client:
            response = await client.get(geo_url)
            response.raise_for_status()
            geodata = response.json()
        city_name = geodata.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ')
        country = geodata.get('sys', {}).get('country', '')

        data = await get_one_call_data(latitude, longitude, api_key)
        current = data['current']
        
        temp = current['temp']
        feels_like = current['feels_like']
        description = current['weather'][0]['description']
        humidity = current['humidity']
        wind_speed = current['wind_speed']
        uv_index = get_uv_index_description(current.get('uvi', 0))
        sunrise = datetime.fromtimestamp(current['sunrise']).strftime('%H:%M')
        sunset = datetime.fromtimestamp(current['sunset']).strftime('%H:%M')
        
        return(
            f'–ü–æ–≥–æ–¥–∞ –≤ {city_name}, {country} (–ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é):\n'
            f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C)\n'
            f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}\n'
            f'üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
            f'üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n'
            f'‚òÄÔ∏è –£–§-–∏–Ω–¥–µ–∫—Å: {uv_index}\n'
            f'üåÖ –í–æ—Å—Ö–æ–¥: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}'
        )
    except Exception as e:
        return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}'

async def get_hourly_forecast(city: str, api_key: str) -> str:
    url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru'
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            data = response.json()

        if data.get('cod') != '200':
            return f"–û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

        city_name = data['city']['name']
        message = [f'–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ {city_name} –Ω–∞ 24 —á–∞—Å–∞:\n']

        for item in data['list'][:8]: 
            time_str = datetime.fromtimestamp(item['dt']).strftime('%H:%M')
            temp = item['main']['temp']
            description = item['weather'][0]['description']
            message.append(f"{time_str}: {temp:.1f}¬∞C, {description.capitalize()}")
        
        return '\n'.join(message)
    except Exception as e:
        return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", callback_data='ask_city_weather')],
        [InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data='ask_city_forecast')],
        [InlineKeyboardButton("–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data='ask_city_hourly')],
        [InlineKeyboardButton("üìç –ü–æ–≥–æ–¥–∞ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é", callback_data='get_weather_by_location')],
        [InlineKeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", callback_data='show_favorite_cities')],
        [InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data='manage_subscriptions')],
        [InlineKeyboardButton("‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='feedback_start')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    user = update.effective_user
    text = f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø MeteoBot. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:'
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text('–ü—Ä–∏–º–µ—Ä: /setcity –ú–æ—Å–∫–≤–∞')
        return
    city = ' '.join(context.args)
    set_user_default_city(update.effective_user.id, city)
    await update.message.reply_text(f'–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}.')

async def add_fav(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text('–ü—Ä–∏–º–µ—Ä: /addfav –ü–∞—Ä–∏–∂')
        return
    city = ' '.join(context.args).strip()
    if add_favorite_city(update.effective_user.id, city):
        await update.message.reply_text(f'–ì–æ—Ä–æ–¥ "{city}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.')
    else:
        await update.message.reply_text(f'–ì–æ—Ä–æ–¥ "{city}" —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    action = context.user_data.get('next_action')
    if not action:
        await update.message.reply_text('–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.')
        return

    city = update.message.text
    if action == 'get_weather':
        weather_info = await get_weather(city, OPENWEATHER_API_KEY)
        await update.message.reply_text(weather_info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]))
    elif action == 'get_forecast':
        forecast_info = await get_forecast(city, OPENWEATHER_API_KEY)
        await update.message.reply_text(forecast_info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]))
    elif action == 'get_hourly':
        hourly_info = await get_hourly_forecast(city, OPENWEATHER_API_KEY)
        await update.message.reply_text(hourly_info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]))
    
    context.user_data.pop('next_action', None)

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == 'ask_city_weather':
        context.user_data['next_action'] = 'get_weather'
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:')
    elif query.data == 'ask_city_forecast':
        context.user_data['next_action'] = 'get_forecast'
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:')
    elif query.data == 'ask_city_hourly':
        context.user_data['next_action'] = 'get_hourly'
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:')
    elif query.data == 'get_weather_by_location':
        await query.edit_message_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —è –º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É.')
    elif query.data == 'show_favorite_cities':
        await show_favorite_cities_menu(update, context)
    elif query.data.startswith('weather_fav_'):
        city = query.data.replace('weather_fav_', '')
        weather_info = await get_weather(city, OPENWEATHER_API_KEY)
        await query.edit_message_text(weather_info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]))
    elif query.data == 'back_to_main':
        await start(update, context)
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ ConversationHandler

async def show_favorite_cities_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    fav_cities = get_favorite_cities(query.from_user.id)
    if not fav_cities:
        await query.edit_message_text('–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]))
        return
    
    keyboard = [[InlineKeyboardButton(city, callback_data=f'weather_fav_{city}')] for city in fav_cities]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    await query.edit_message_text('–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:', reply_markup=InlineKeyboardMarkup(keyboard))

# --- –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (ConversationHandler) ---

# 1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
async def manage_subscriptions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = query.from_user.id
    subscriptions = get_user_subscriptions(user_id)
    
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data='sub_add')]]
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."

    if subscriptions:
        text += "\n\n–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:"
        for sub in subscriptions:
            days = " ".join(json.loads(sub['days'])) if sub['days'] != 'all' else '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
            keyboard.append([InlineKeyboardButton(f"üìç {sub['city']} –≤ {sub['time']} ({days})", callback_data=f"sub_view_{sub['id']}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECTING_ACTION

# 2. –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ -> –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞
async def sub_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    context.user_data['new_sub'] = {}
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:")
    return AWAITING_CITY

# 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ -> –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
async def sub_receive_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = update.message.text
    context.user_data['new_sub']['city'] = city
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30).")
    return AWAITING_TIME

# 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ -> –∑–∞–ø—Ä–æ—Å –¥–Ω–µ–π
async def sub_receive_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        time_str = update.message.text
        dt_time.strptime(time_str, '%H:%M')
        context.user_data['new_sub']['time'] = time_str
        
        keyboard = [
            [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data='sub_days_all')],
            [InlineKeyboardButton("–ü–æ –±—É–¥–Ω—è–º", callback_data='sub_days_weekdays')],
            [InlineKeyboardButton("–ü–æ –≤—ã—Ö–æ–¥–Ω—ã–º", callback_data='sub_days_weekends')],
        ]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SELECTING_DAYS
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        return AWAITING_TIME

# 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π -> –∑–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
async def sub_receive_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    days_choice = query.data.split('_')[-1]
    
    days_map = {
        'all': 'all',
        'weekdays': ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç'],
        'weekends': ['–°–±', '–í—Å']
    }
    context.user_data['new_sub']['days'] = days_map[days_choice]
    
    keyboard = [
        [InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", callback_data='sub_type_current')],
        [InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data='sub_type_forecast')],
        [InlineKeyboardButton("–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data='sub_type_hourly')],
        [InlineKeyboardButton("üö® –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ", callback_data='sub_type_alert_rain')],
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECTING_FORECAST_TYPE

# 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ -> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
async def sub_receive_type_and_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    forecast_type = query.data.split('_')[-1]
    context.user_data['new_sub']['forecast_type'] = forecast_type
    
    # –î–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –∏ –¥–Ω–∏
    if 'alert' in forecast_type:
        context.user_data['new_sub']['time'] = None
        context.user_data['new_sub']['days'] = None
        add_subscription(query.from_user.id, context.user_data['new_sub'])
        await query.answer("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ –≤–∫–ª—é—á–µ–Ω–æ!")
        await query.edit_message_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ –≤–∫–ª—é—á–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å.")
    else:
        sub_id = add_subscription(query.from_user.id, context.user_data['new_sub'])
        schedule_single_job(application, query.from_user.id, sub_id)
        await query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        await query.edit_message_text("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    context.user_data.pop('new_sub', None)
    await manage_subscriptions_menu(update, context)
    return SELECTING_ACTION

# 7. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
async def sub_view_and_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    sub_id = int(query.data.split('_')[-1])
    
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f'sub_delete_confirm_{sub_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='sub_back_to_list')]
    ]
    await query.edit_message_text("–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECTING_ACTION

async def sub_view(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    sub_id = int(query.data.split('_')[-1])

    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM subscriptions WHERE id = ?', (sub_id,))
    sub = cursor.fetchone()
    conn.close()

    if not sub:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
        await manage_subscriptions_menu(update, context, is_new_message=False)
        return SELECTING_ACTION

    days_map = {"0": "–ü–Ω", "1": "–í—Ç", "2": "–°—Ä", "3": "–ß—Ç", "4": "–ü—Ç", "5": "–°–±", "6": "–í—Å"}
    forecast_map = {
        'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑',
        'alert_rain': 'üö® –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ–∂–¥–µ'
    }
    
    days_list = json.loads(sub['days'])
    days_str = ", ".join(sorted([days_map[d] for d in days_list], key=lambda x: list(days_map.values()).index(x)))
    forecast_type_str = forecast_map.get(sub['forecast_type'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')

    text = (
        f"<b>–î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Ññ{sub['id']}</b>\n"
        f"- <b>–ì–æ—Ä–æ–¥:</b> {sub['city']}\n"
        f"- <b>–í—Ä–µ–º—è:</b> {sub['time']}\n"
        f"- <b>–î–Ω–∏:</b> {days_str}\n"
        f"- <b>–¢–∏–ø:</b> {forecast_type_str}"
    )

    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='manage_subscriptions')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SELECTING_ACTION


async def sub_delete_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    sub_id = int(query.data.split('_')[-1])
    delete_subscription(sub_id)
    await query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await manage_subscriptions_menu(update, context)
    return SELECTING_ACTION

# 8. –û—Ç–º–µ–Ω–∞
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await start(update, context)
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ---
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    location = update.message.location
    weather_info = await get_weather_by_coords(location.latitude, location.longitude, OPENWEATHER_API_KEY)
    await update.message.reply_text(
        weather_info,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]])
    )

# --- –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.")
    return AWAITING_FEEDBACK

async def feedback_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    feedback_text = update.message.text
    user = update.effective_user
    
    if ADMIN_CHAT_ID:
        text_to_admin = (
            f"‚úâÔ∏è –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç {user.full_name} (@{user.username}, ID: {user.id})\n\n"
            f"–¢–µ–∫—Å—Ç:\n{feedback_text}"
        )
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text_to_admin)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! (–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞)")

    await start(update, context)
    return ConversationHandler.END

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
async def send_scheduled_forecast(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    user_id, city, forecast_type = job_data['user_id'], job_data['city'], job_data['forecast_type']
    
    if forecast_type in ['current', 'forecast', 'hourly']:
        if forecast_type == 'current':
            weather_info = await get_weather(city, OPENWEATHER_API_KEY)
        elif forecast_type == 'forecast':
            weather_info = await get_forecast(city, OPENWEATHER_API_KEY)
        else: # hourly
            weather_info = await get_hourly_forecast(city, OPENWEATHER_API_KEY)
        await context.bot.send_message(chat_id=user_id, text=f"‚è∞ –í–∞—à –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}:\n\n{weather_info}")
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ check_for_rain_alerts

async def check_for_rain_alerts(application: Application):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, city FROM subscriptions WHERE forecast_type = 'alert_rain' AND is_active = 1")
    alerts = cursor.fetchall()
    conn.close()

    for user_id, city in alerts:
        try:
            geo_url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}'
            async with httpx.AsyncClient() as client:
                geo_res = await client.get(geo_url)
                geo_res.raise_for_status()
                geodata = geo_res.json()
                if geodata.get('cod') != 200: continue
                lat, lon = geodata['coord']['lat'], geodata['coord']['lon']

            data = await get_one_call_data(lat, lon, OPENWEATHER_API_KEY)
            hourly_forecast = data.get('hourly', [])

            for i in range(1, 4):
                if len(hourly_forecast) > i:
                    weather_id = hourly_forecast[i]['weather'][0]['id']
                    if 500 <= weather_id <= 531:
                        job_name = f'alert_rain_{user_id}_{city}_{hourly_forecast[i]["dt"]}'
                        if not application.job_queue.get_jobs_by_name(job_name):
                            await application.bot.send_message(
                                chat_id=user_id,
                                text=f"üö® –í–Ω–∏–º–∞–Ω–∏–µ! –í –≥–æ—Ä–æ–¥–µ {city} –≤ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç! ‚òî"
                            )
                            application.job_queue.run_once(lambda: None, 3 * 3600, name=job_name)
                        break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ –¥–ª—è {city}: {e}")

async def schedule_single_job(application: Application, user_id: int, sub_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM subscriptions WHERE id = ?', (sub_id,))
    sub_data = cursor.fetchone()
    conn.close()

    if not sub_data or not sub_data['time']:
        return

    sub = dict(sub_data)
    job_name = f"sub_{sub_id}"

    for job in application.job_queue.get_jobs_by_name(job_name):
        job.schedule_removal()

    days_of_week = tuple(range(7))
    if sub['days'] and sub['days'] != 'all':
        days_map = {'–ü–Ω': 0, '–í—Ç': 1, '–°—Ä': 2, '–ß—Ç': 3, '–ü—Ç': 4, '–°–±': 5, '–í—Å': 6}
        try:
            days_list = json.loads(sub['days'])
            if days_list == 'weekdays':
                days_of_week = tuple(range(5))
            elif days_list == 'weekends':
                days_of_week = (5, 6)
            else:
                days_of_week = tuple(days_map[day] for day in days_list)
        except (json.JSONDecodeError, TypeError):
            pass

    hour, minute = map(int, sub['time'].split(':'))
    application.job_queue.run_daily(
        send_scheduled_forecast,
        time=dt_time(hour, minute, tzinfo=pytz.timezone('Europe/Moscow')),
        days=days_of_week,
        chat_id=user_id,
        user_id=user_id,
        name=job_name,
        data={'user_id': user_id, 'city': sub['city'], 'forecast_type': sub['forecast_type']}
    )

async def schedule_jobs(application: Application):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ —Ä–∞–∑ –≤ —á–∞—Å, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, user_id FROM subscriptions WHERE is_active = 1 AND forecast_type != 'alert_rain'")
    subs = cursor.fetchall()
    conn.close()

    for sub_id, user_id in subs:
        job_name = f'sub_{sub_id}'
        if not application.job_queue.get_jobs_by_name(job_name):
             await schedule_single_job(application, user_id, sub_id)
    print(f"[{datetime.now()}] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–æ–≥–Ω–æ–∑—ã) –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

    await check_for_rain_alerts(application)
    print(f"[{datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –¥–æ–∂–¥–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def main() -> None:
    if not TOKEN or not OPENWEATHER_API_KEY:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENWEATHER_API_KEY")
        return

    init_db()
    
    application = Application.builder().token(TOKEN).build()

    sub_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(manage_subscriptions_menu, pattern='^manage_subscriptions$')],
        states={
            SELECTING_ACTION: [
                CallbackQueryHandler(sub_add_start, pattern='^sub_add$'),
                CallbackQueryHandler(sub_view, pattern=r'^sub_view_\d+$'),
                CallbackQueryHandler(sub_delete_confirmed, pattern=r'^sub_delete_\d+$'),
                CallbackQueryHandler(start, pattern='^back_to_main$'),
            ],
            AWAITING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, sub_receive_city)],
            AWAITING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, sub_receive_time)],
            SELECTING_DAYS: [CallbackQueryHandler(sub_receive_days)],
            SELECTING_FORECAST_TYPE: [CallbackQueryHandler(sub_receive_forecast_type)],
        },
        fallbacks=[CallbackQueryHandler(cancel_conversation, pattern='^cancel$')],
        map_to_parent={
            SELECTING_ACTION: SELECTING_ACTION, 
            ConversationHandler.END: ConversationHandler.END
        }
    )

    feedback_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(feedback_start, pattern='^feedback_start$')],
        states={
            AWAITING_FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_receive)],
            AWAITING_ADMIN_REPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_reply_receive)]
        },
        fallbacks=[CallbackQueryHandler(cancel_conversation, pattern='^cancel_feedback$')]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(sub_conv_handler)
    application.add_handler(feedback_conv_handler)
    
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    application.add_handler(MessageHandler(filters.LOCATION, location_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
    scheduler.add_job(schedule_jobs, 'interval', minutes=60, args=[application], next_run_time=datetime.now())
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()